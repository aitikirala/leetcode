Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".
 
Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.


ðŸ§  Idea (Horizontal Scanning):

Start by assuming the first word is the common prefix.
Compare it with the next word.
Shrink the prefix until it matches the beginning of that word.
Repeat for all words in the array.
If at any point the prefix becomes empty, return "".

Input: ["flower", "flow", "flight"]

Start: prefix = "flower"
Compare with "flow" â†’ shrink to "flow"
Compare with "flight" â†’ shrink to "fl" âœ…


class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";

        // Start with the first word as the prefix
        String prefix = strs[0];

        // Compare prefix with each word in the array
        for (int i = 1; i < strs.length; i++) {
            // Shrink prefix until it matches the beginning of strs[i]
            while (!strs[i].startsWith(prefix)) {
                prefix = prefix.substring(0, prefix.length() - 1);

                // If the prefix becomes empty, there is no common prefix
                if (prefix.isEmpty()) return "";
            }
        }

        return prefix;
    }
}


