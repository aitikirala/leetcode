Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 


First Run:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] arr = new int [2];
        for(int i=0; i<nums.length; i++){
            for(int j=0; j<nums.length; j++){
                if(i != j && nums[i] + nums[j] == target){
                    arr[0]=i;
                    arr[1]=j;
                    
                }
                
            }
        }
        return arr;

    }
}

Point of Concern: This runs in O(n^2) time complexity, and is probably not the most efficent solution. Maybe I can optimize this to O(n).


Updated Solution:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap <Integer, Integer> map = new HashMap<>();
        
        //Looping through the array
        for(int i=0; i< nums.length; i++){
            //checking if the map contains the complement
            int complement = target - nums[i];
            if(map.containsKey(complement)){
                //If found, return the indices of the complement (from the map) and the current number (i)
                return new int[] { map.get(complement), i };
            }
            //Otherwise, add the number and its indice into the map as key and value, respectively
            map.put(nums[i], i);
        }
        return new int[] {}; // if no solution is found
    }
}
