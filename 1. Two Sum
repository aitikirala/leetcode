Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.




Solution:

def two_sum(nums, target):
    num_map = {}  # Step 1: Create an empty dictionary to store seen numbers and their indices

    for i, num in enumerate(nums):  # Step 2: Loop through the list, keeping track of index (i) and value (num)
        complement = target - num  # Step 3: Calculate the complement (number needed to reach target)
        
        if complement in num_map:  # Step 4: Check if the complement is already in the dictionary
            return [num_map[complement], i]  # Step 5: If found, return the indices of the complement and current number

        num_map[num] = i  # Step 6: If not found, store the current number with its index in the dictionary

    return []  # Step 7: If no solution is found, return an empty list
