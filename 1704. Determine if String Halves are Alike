You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.

Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.

Return true if a and b are alike. Otherwise, return false.

 

Example 1:

Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.
Example 2:

Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.



NOTE: Substring (start, end) means start is included but end isnt included (e.g. if s = abcdef, s.substring(1,4) = "bcd"


Solution:

class Solution {
    public boolean halvesAreAlike(String s) {
        if(s.length() % 2 == 0){
            int mid = s.length()/2;
            String first = s.substring(0,mid), last = s.substring(mid, s.length());
            int vowelFirst = 0, vowelLast = 0;
            
            for(int i=0; i < mid; i++){
                if(first.charAt(i) == 'a' ||first.charAt(i) == 'e' ||first.charAt(i) == 'i' ||first.charAt(i) == 'o' ||first.charAt(i) == 'u'){
                    vowelFirst++;
                }
                
                if(last.charAt(i) == 'a' ||last.charAt(i) == 'e' ||last.charAt(i) == 'i' ||last.charAt(i) == 'o' ||last.charAt(i) == 'u'){
                    vowelLast++;
                }
            }

            if(vowelFirst == vowelLast){
                return true;
            }
        }

        return false;
        
    }
}
