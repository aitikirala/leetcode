Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 
Constraints:

-231 <= x <= 231 - 1



class Solution {
    public boolean isPalindrome(int x) {

        // ❌ Rule out negatives (e.g., -121) and numbers ending in 0 (e.g., 10), except 0 itself
        // Because: -121 ≠ 121 and 10 → "01" ≠ "10"
        if (x < 0 || (x % 10 == 0 && x != 0)) return false;

        // ✅ This will store the reversed second half of the number
        int reversedHalf = 0;

        // 🔁 Continue until we've processed half the digits
        while (x > reversedHalf) {
            int digit = x % 10; // Get the last digit of x
            reversedHalf = reversedHalf * 10 + digit; // Append digit to reversedHalf
            x = x / 10; // Remove the last digit from x
        }

        // ✅ Check for palindrome:
        // Case 1: Even number of digits → x == reversedHalf (e.g., 1221 → 12 == 12)
        // Case 2: Odd number of digits → x == reversedHalf / 10 (e.g., 12321 → 12 == 123 / 10)
        return x == reversedHalf || x == reversedHalf / 10;
    }
}
